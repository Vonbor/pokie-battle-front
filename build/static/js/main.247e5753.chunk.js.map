{"version":3,"sources":["Pokemon.js","Details.js","Info.js","App.js","reportWebVitals.js","index.js"],"names":["Pokemon","useState","data","setData","useEffect","fetch","then","res","json","console","log","length","id","map","poki","class","base","HP","aria-hidden","icon","faHeart","name","english","src","pokeID","alt","type","elem","className","Object","keys","key","Details","useParams","pokemon","setPokemon","poke","Info","info","pokeInfo","setPokeInfo","french","japanese","chinese","Attack","Defense","Speed","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.247e5753.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHeart } from '@fortawesome/fontawesome-free-solid';\r\nimport './Pokemon.css';\r\n\r\nexport default function Pokemon() {\r\n    const [data, setData] = useState([]);\r\n    useEffect(() => {\r\n        fetch('https://pokie-app.herokuapp.com/pokemon')\r\n            .then((res) => res.json())\r\n            .then((res) => {\r\n                setData(res);\r\n                console.log(res);\r\n            });\r\n    }, []);\r\n\r\n    const createPokeImage = (pokeID) => {\r\n        return `https://pokeres.bastionbot.org/images/pokemon/${pokeID}.png`;\r\n    };\r\n    if (data.length) {\r\n        return (\r\n            <div id=\"app\">\r\n                {data.map((poki) => {\r\n                    return (\r\n                        <div class=\"poke-card\" id=\"{poki.name}\">\r\n                            <div class=\"flexy\">\r\n                                <span class=\"card-id\">#{poki.id}</span>\r\n                                <span class=\"card-hp\">\r\n                                    HP {poki.base.HP}\r\n                                    <i\r\n                                        id=\"poke-hp\"\r\n                                        class=\"fa fa-heart\"\r\n                                        aria-hidden=\"true\"\r\n                                    >\r\n                                        <FontAwesomeIcon icon={faHeart} />\r\n                                    </i>\r\n                                </span>\r\n                            </div>\r\n                            <h1 class=\"card-name\">{poki.name.english}</h1>\r\n                            <img\r\n                                class=\"card-image\"\r\n                                src={createPokeImage(poki.id)}\r\n                                alt={poki.name.english}\r\n                            />\r\n                            <span class=\"card-details\">\r\n                                Type:{' '}\r\n                                {poki.type.map((elem) => {\r\n                                    return (\r\n                                        <span className=\"pokiType\">{elem}</span>\r\n                                    );\r\n                                })}\r\n                            </span>\r\n                            <span>\r\n                                {Object.keys(poki.base).map((key) => {\r\n                                    return (\r\n                                        <span className=\"pokiBase\">\r\n                                            {key}: {poki.base[key]},\r\n                                        </span>\r\n                                    );\r\n                                })}\r\n                            </span>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    } else {\r\n        return <p className=\"spinner\">LOADING...</p>;\r\n    }\r\n}\r\n\r\n/* <Link to={`${poki.id}`}><a class=\"btn\">Detail</a></Link> */\r\n","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport './Pokemon.css';\r\nimport './Info.css';\r\nimport './App.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHeart } from '@fortawesome/fontawesome-free-solid';\r\n\r\nexport default function Details() {\r\n    const { id } = useParams({});\r\n    const createPokeImage = (pokeID) => {\r\n        return `https://pokeres.bastionbot.org/images/pokemon/${pokeID}.png`;\r\n    };\r\n\r\n    const [pokemon, setPokemon] = useState();\r\n    useEffect(() => {\r\n        fetch(`https://pokie-app.herokuapp.com/pokemon/${id}`)\r\n            .then((res) => res.json())\r\n            .then((res) => {\r\n                return setPokemon(res);\r\n                console.log(res);\r\n            });\r\n    }, []);\r\n\r\n    if (pokemon) {\r\n        return (\r\n            <div>\r\n                {pokemon.map((poke) => {\r\n                    return (\r\n                        <>\r\n                            <div id=\"app\">\r\n                                <div class=\"poke-card\" id=\"{poke.name}\">\r\n                                    <div class=\"flexy\">\r\n                                        <span class=\"card-id\">#{poke.id}</span>\r\n                                        <span class=\"card-hp\">\r\n                                            HP {poke.base.HP}\r\n                                            <i\r\n                                                id=\"poke-hp\"\r\n                                                class=\"fa fa-heart\"\r\n                                                aria-hidden=\"true\"\r\n                                            >\r\n                                                <FontAwesomeIcon\r\n                                                    icon={faHeart}\r\n                                                />\r\n                                            </i>\r\n                                        </span>\r\n                                    </div>\r\n                                    <h1 class=\"card-name\">\r\n                                        {poke.name.english}\r\n                                    </h1>\r\n                                    <img\r\n                                        class=\"card-image\"\r\n                                        src={createPokeImage(poke.id)}\r\n                                        alt={poke.name.english}\r\n                                    />\r\n                                    <span class=\"card-details\">\r\n                                        Type:{' '}\r\n                                        {poke.type.map((elem) => {\r\n                                            return (\r\n                                                <span className=\"pokiType\">\r\n                                                    {elem}\r\n                                                </span>\r\n                                            );\r\n                                        })}\r\n                                    </span>\r\n                                    <span>\r\n                                        {Object.keys(poke.base).map((key) => {\r\n                                            return (\r\n                                                <span className=\"pokiBase\">\r\n                                                    {key}: {poke.base[key]},\r\n                                                </span>\r\n                                            );\r\n                                        })}\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    } else {\r\n        return <p className=\"spinner\">LOADING...</p>;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport './Info.css';\r\nimport './Pokemon.css';\r\n\r\nexport default function Info() {\r\n    const { id, info } = useParams();\r\n\r\n    const [pokeInfo, setPokeInfo] = useState();\r\n    //const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        fetch(`https://pokie-app.herokuapp.com/pokemon/${id}/${info}`)\r\n            .then((res) => res.json())\r\n            .then((res) => {\r\n                setPokeInfo(res);\r\n                //setLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    const renderPokemon = (poke) => {\r\n        if (info === 'name') {\r\n            return (\r\n                <div>\r\n                    <div className=\"wrap\">\r\n                        <span>English: {poke.english}</span>\r\n                        <span>French: {poke.french}</span>\r\n                        <span>Japanese: {poke.japanese}</span>\r\n                        <span>Chinese: {poke.chinese}</span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else if (info === 'type') {\r\n            return (\r\n                <div>\r\n                    <div className=\"wrap\">\r\n                        <span>{poke.map((type) => ` ${type}`)}</span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else if (info === 'base') {\r\n            return (\r\n                <div>\r\n                    <div className=\"wrap\">\r\n                        <div>\r\n                            <div>\r\n                                <span>{`HP: ${poke.HP}`}</span>\r\n                                <span>{`Attack: ${poke.Attack}`}</span>\r\n                                <span>{`Defense: ${poke.Defense}`}</span>\r\n                                <span>{`Sp. Attack: ${poke['Sp. Attack']}`}</span>\r\n                                <span>{`Sp. Defense: ${poke['Sp. Defense']}`}</span>\r\n                                <span>{`Speed: ${poke.Speed}`}</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return <h1>Select name, base or type</h1>;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>{pokeInfo ? renderPokemon(pokeInfo) : 'Error is happened'}</div>\r\n    );\r\n}\r\n","import './App.css';\r\nimport React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport Pokemon from './Pokemon';\r\nimport Details from './Details';\r\nimport Info from './Info';\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <main>\r\n                <h1 id=\"main-header\">POKEFIGHT</h1>\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <Pokemon />\r\n                    </Route>\r\n                    <Route exact path=\"/pokemon/:id\">\r\n                        <Details />\r\n                    </Route>\r\n                    <Route exact path=\"/pokemon/:id/:info\">\r\n                        <Info />\r\n                    </Route>\r\n                </Switch>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}